
// ARROW FUNCTIONS!!
// Create 4 arrow functions that take two parameters and then return the result of an arithmetic operation

// the function 'add' will add them, etc.
// the rest of the functions will be called 'sub' 'mul and 'div'

// Your #arrowCheck <p> should look like this:
// (sum) | (difference) | (product) | (quotient)

const arrowCheck = document.getElementById('arrowCheck');
const num1 = randomInt(1,10);
const num2 = randomInt(1,10);

// YOUR CODE HERE

if (typeof add !== 'undefined' && typeof sub !== 'undefined' && typeof mul !== 'undefined' && typeof div !== 'undefined') arrowCheck.textContent = add(num1,num2) + ' | ' + sub(num1,num2) + ' | ' + mul(num1,num2) + ' | ' + div(num1,num2);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// SWITCH!!
// Create a switch statement that tells you the color of the variable 'item', which has been
// randomly assigned a value from the 'groceryList' array
// The switch statement should change the textContent of switchCheck so that it states the color
// of the produce item passed into it
// Like so:
// Carrots are orange!
// If passed a value it doesn't recognize as produce, it should state that the item is not produce
// In case you want to change the text color to match, some hex codes are provided!

// You'll know it's done right when the webpage accurately states the color of an item OR states
// that the item is NOT produce

const switchCheck = document.getElementById('switchCheck');
const groceryList = ['Cabbage','Lemon','Strawberry','Lettuce','Celery','Banana','Broccoli','Corn','Shampoo','Windex'];
const item = randomElement(groceryList);
const red = '#df2c14';
const green = '#75975e';
const yellow = '#d9b51c';

// YOUR CODE HERE

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// SPLICE!!
// Use .splice() to replace all 'weed' elements of the array 'garden' with ' seed'
// Your #spliceCheck <p> should have a seed in every index where a weed used to be

// You'll know it's done right when the text color goes green!

const spliceCheck = document.getElementById('spliceCheck');
const garden = ['weed',' plant',' plant',' weed',' weed',' weed',' plant',' weed'];
const initialLength = garden.length;

// YOUR CODE HERE

const finalLength = garden.length;
spliceCheck.textContent = garden;
if (arraysEqual(garden,[' seed', ' plant', ' plant', ' seed', ' seed', ' seed', ' plant', ' seed'])) {
    spliceCheck.style.color = green;
} else {
    spliceCheck.style.color = red;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// MAP!!
// Use .map() to create a new array of strings that state whether each element of
// 'scatteredInts' is over or under the variable 'overUnder'! Store the mapped array
// in the variable 'mappedArray'!

// You'll know it's done right when you generate a list of 'over's and 'under's that
// accurately states whether or not the respective element of 'scatteredInts' is over or
// under the 'overUnder' variable!

const integers = document.getElementById('integers');
const scatteredInts = reArraynge([1,2,3,4,5,6,7,8,9],randomInt(1,10));
integers.textContent = scatteredInts.reduce((ac,cv) => ac += ` ${cv}`);

const mapCheck = document.getElementById('mapCheck');
const overUnder = randomInt(1,10);

const mappedArray = "YOUR CODE HERE";

mapCheck.textContent = `(${overUnder}) ${mappedArray} (${overUnder})`;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// REDUCE!!
// Familiarize yourself with the variable 'mixedArray'
// 'reArraynge()' is a function that randomly and nondestructively rearranges the elements of a 
// given array and returns that array

// Use .reduce() to iterate over 'mixedArray', adding each successive element to
// a string that lists out the elements in a way you would never suspect was generated by code!
// like so:
// Today we're serving the reuben, the club sandwich, and the dinty moore!
// Then store the reduced array in 'reduceArray'!

// You'll know it's done right when you see your grammatical list on the webpage!

const forCheck = document.getElementById('forCheck');
const sandwiches = ['The Dinty Moore','The Club Sandwich','The Reuben'];
const drinks = ['Coffee','Water','Tea','Pepsi','Warm apple cider'];
const desserts = ['Strudles','Baklava','Seven Layer cake','Cheesecake','Coffee cake','Brownies']
const mixedArray = reArraynge(randomElement([sandwiches,drinks,desserts]));

const reduceArray = "YOUR CODE HERE";

reduceCheck.textContent = reduceArray;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// FIND!!
// Use .find() to determine the first value of the array 'scatteredInts' that is divisible by the global
// variable 'divisor'
// You can use the function isDivBy() which returns true when the first parameter is divisible by
// the global variable 'divisor'.
// Store the element you found using .find() in the variable 'foundElement'!

// You'll know it's done right when the webpage accurately states the first number divisble by 'divisor'!

const findCheck = document.getElementById('findCheck');

let divisor = randomInt(1,5);

const foundElement = "YOUR CODE HERE";;

findCheck.textContent = `The first number divisible by ${divisor} is ${foundElement}! :)`;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// FILTER!!
// Use .filter() to create an array of all elements in the array 'scatteredInts' that are divisble by
// the global variable 'divisor'
// Store the filtered array in the variable 'filterArray'

// You'll know it's done right when the webpage accurately states all numbers divisible by 'divisor'!
// ('divisor' has been assigned a new value since the find exercise)

const filterCheck = document.getElementById('filterCheck');
divisor = randomInt(1,5);

const filterArray = ["YOUR CODE HERE"];

if (filterArray.length > 1) filterCheck.textContent = filterArray.reduce((ac,cv) => ac += ', ' + cv) + ` are the values divisible by ${divisor}!`;
else filterCheck.textContent = filterArray[0] + ` is the only value divisible by ${divisor}!`;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// SPREAD!!
// Familiarize yourself with the const 'randomSandwich'
// Use the spread operator to pass the function ingredientRead() the elements of 'randomSandwich', then update
// the #spreadCheck <p> to its return value

const spreadCheck = document.getElementById('spreadCheck');
const soni = ['Soni','corned beef','swiss','cole slaw','rye'];
const reuben = ['Reuben','corned beef','swiss','sauerkraut','grilled rye'];
const novaLox = ['Nova Lox sandwich','lox','cream cheese','tomato and onion','a bagel'];
const moulinRouge = ['Moulin Rouge','chicken breast','meunster','tomato and hot mustard','rye'];

const randomSandwich = randomElement([soni,reuben,novaLox,moulinRouge]);

function ingredientRead(name,meat,cheese,toppings,bread) {
    return `The ${name} is ${meat} and ${cheese} with ${toppings} on ${bread}!`;
}

spreadCheck.textContent = "YOUR CODE HERE";

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// REST!!
// Use two parameters and the rest parameter to create function that returns a string like this:
// "The first number is ${the first number given}, the second is ${the second number given},
// and I don't know the rest but together it all kind of looks like ${the sum of all other numbers provided}"

// Then update the #restCheck <p> to its return value when passed all the elements of 'scatteredInts' as arguments

// (To check your function, the sum given should be 45 minus the two numbers stated outright)

const restCheck = document.getElementById('restCheck');

// YOUR CODE HERE

restCheck.textContent = "YOUR CODE HERE";

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*                                                     EXERCISE COMPLETE                                                      */
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



// Setting up the functions I used!

function randomInt(min,max) {
    const diff = (max)-min;
    return min + Math.round(diff * Math.random());
    //      Since Math.random returns a random decimal between 0 and 1, you can multiply it
    // by another value to get a random portion of that value.
    //      Multiply Math.random by the difference of the max and min and you get a number
    // that is a random amount across the gap between the min and max
    //      If you add this to the minimum value, you've generated a random number between the
    // two given values.
    //      This doesn't guarantee it's an integer tho, so you'd have to round the number
    // at some point.
}

function randomElement(array) {
    return array[randomInt(0,array.length-1)];
    // Uses my randomInt() function
}

function reArraynge(array) {
    let returnArray = []; // Set up the array that we're going to mutate&return
    let done = []; // Set up an array to store indexes that a value has already been assigned to
    for (const element of array) {
        let newIndex = randomInt(0,array.length-1);
        // Generate a random index to store the element at
        while (done.includes(newIndex)) {
            newIndex = randomInt(0,array.length-1);
            // If the random number we generated is an index of returnArray that we already
            // filled, (which we detect by checking if that index is included in the "done" array)
            // Keep generating a new index for this value until we generate one that has not
            // already been filled
        }
        done.push(newIndex);
        // Add to "done" the index of returnArray at which we stored the most recent element
        // so that later we can check "done" to see what he have and haven't already filled
        returnArray[newIndex] = element;
        // Actually adds the element to the returnArray at the random index we generated
    }
    return returnArray;
}

function isDivBy(n) {
    return !(n%divisor);
    // The goal of this function is that it returns true or false depending on whether or not
    // the pram n is divisble by the global variable divisor

    // If n is evenly divisble by the divisor global variable, it will not
    // have a remainder.
    // :. the output of n%divisor would then be 0
    // Zero is a falsy value
    // taking the ! of that would then give your true
    // This means that when the expression n%divisor evals to 0, the function returns
    // true (!n%divisor)
    
    // I would've written this as an arrow function but then it wouldn't've hoisted :(
}

function arraysEqual(a, b) {
    if (a === b) return true;
    if (a == null || b == null) return false;
    if (a.length !== b.length) return false;

    for (var i = 0; i < a.length; ++i) {
      if (a[i] !== b[i]) return false;
    }
    return true;

    // Stole this one from https://stackoverflow.com/questions/3115982/how-to-check-if-two-arrays-are-equal-with-javascript
  }